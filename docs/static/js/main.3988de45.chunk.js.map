{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","state","dayPerMonth","hourPerDay","now","numberOfPeople","showSetting","startTime","unitPricePerDay","unitPricePerMonth","unitPriceType","__counter","__onClickStart","setState","Date","startCounter","__onClickStop","stopCounter","forceUpdate","__onClickResume","__onClickReset","clearInterval","this","setInterval","setting","price","onChange","s","Math","ceil","toLocaleString","onClick","Component","ToggleSetting","props","text","href","e","preventDefault","UnitPriceType","htmlFor","checked","id","type","value","UnitPricePerMonth","target","UnitPricePerDay","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3988de45.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport './App.css'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      dayPerMonth: 20,\n      hourPerDay: 8,\n      now: null,\n      numberOfPeople: 1,\n      showSetting: false,\n      startTime: null,\n      unitPricePerDay: 1000,\n      unitPricePerMonth: 1000000,\n      unitPriceType: 'perMonth',\n    }\n\n    this.__counter = null\n\n    this.__onClickStart = () => {\n      this.setState({\n        now: new Date(),\n        startTime: new Date(),\n      })\n\n      this.startCounter()\n    }\n\n    this.__onClickStop = () => {\n      this.stopCounter()\n      this.forceUpdate()\n    }\n\n    this.__onClickResume = () => {\n      this.setState({\n        now: new Date(),\n      })\n\n      this.startCounter()\n    }\n\n    this.__onClickReset = () => {\n      this.stopCounter()\n      this.setState({\n        now: null,\n        startTime: null,\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.__counter)\n  }\n\n  startCounter() {\n    const oneFps = 1000 / 60\n    this.__counter = setInterval(() => this.setState({now: new Date()}), oneFps)\n  }\n\n  stopCounter() {\n    clearInterval(this.__counter)\n    this.__counter = null\n  }\n\n  render() {\n    const {\n      dayPerMonth,\n      hourPerDay,\n      now,\n      numberOfPeople,\n      showSetting,\n      startTime,\n      unitPricePerDay,\n      unitPricePerMonth,\n      unitPriceType,\n    } = this.state\n    \n    const elapsedTime = !!now && !!startTime ? (now - startTime) : 0\n    let pricePerSecond\n    if (unitPriceType === 'perDay') {\n      pricePerSecond = unitPricePerDay / 60 / 60\n    } else {\n      pricePerSecond = unitPricePerMonth / dayPerMonth / hourPerDay / 60 / 60\n    }\n    const price = elapsedTime / 1000 * pricePerSecond * numberOfPeople\n\n    let setting\n    if (showSetting) {\n      setting = (\n        <div>\n          <UnitPriceType {...{\n            onChange: (s) => this.setState(s),\n            unitPriceType,\n          }} />\n          {unitPriceType === 'perMonth' && <UnitPricePerMonth {...{\n            dayPerMonth,\n            hourPerDay,\n            numberOfPeople,\n            onChange: (s) => this.setState(s),\n            unitPricePerMonth,\n          }}/>}\n          {unitPriceType === 'perDay' && <UnitPricePerDay {...{\n            onChange: (s) => this.setState(s),\n            numberOfPeople,\n            unitPricePerDay\n          }}/>}\n        </div>\n      )\n    }\n\n    return (\n      <div>\n        <h1>\n          この会議の人件費は\n          <strong>{Math.ceil(price).toLocaleString('ja-JP')}</strong>\n          円です。\n        </h1>\n        <div>\n          {!this.__counter && !now && <button onClick={this.__onClickStart}>開始</button>}\n          {!!this.__counter && <button onClick={this.__onClickStop}>停止</button>}\n          {!this.__counter && !!now && <button onClick={this.__onClickResume}>続行</button>}\n          {!this.__counter && !!startTime && <button onClick={this.__onClickReset}>リセット</button>}\n        </div>\n        <ToggleSetting {...{\n          onChange: (s) => this.setState(s),\n          showSetting,\n        }}/>\n        {setting}\n      </div>\n    )\n  }\n}\n\nconst ToggleSetting = (props) => {\n  let text = '設定を表示する'\n  if (props.showSetting) {\n    text = '設定を隠す'\n  }\n  return (\n    <a {...{\n      href: '#',\n      onClick: (e) => {\n        e.preventDefault()\n        props.onChange({showSetting: !props.showSetting})\n      },\n    }}>\n      {text}\n    </a>\n  )\n}\n\nconst UnitPriceType = (props) => {\n  return (\n    <Fragment>\n      <div>\n        <label htmlFor={'perMonth'}>\n          <input {...{\n            checked: props.unitPriceType === 'perMonth' ? 'checked' : '',\n            id: 'perMonth',\n            onChange: () => props.onChange({unitPriceType: 'perMonth'}),\n            type: 'radio',\n            value: 'perMonth',\n          }} />\n          月単価\n        </label>\n        <label htmlFor={'perDay'}>\n          <input {...{\n            checked: props.unitPriceType === 'perDay' ? 'checked' : '',\n            id: 'perDay',\n            onChange: () => props.onChange({unitPriceType: 'perDay'}),\n            type: 'radio',\n            value: 'perDay',\n          }} />\n          時給\n        </label>\n      </div>\n    </Fragment>\n  )\n}\n\nconst UnitPricePerMonth = (props) => {\n  return (\n    <Fragment>\n      <div>\n        <label htmlFor={'hourPerDay'}>\n          人数\n        </label>\n        <input {...{\n          id: 'numberOfPeople',\n          onChange: (e) => props.onChange({numberOfPeople: e.target.value}),\n          type: 'input',\n          value: props.numberOfPeople,\n        }}/>\n      </div>\n      <div>\n        <label htmlFor={'hourPerDay'}>\n          日/月\n        </label>\n        <input {...{\n          id: 'dayPerMonth',\n          onChange: (e) => props.onChange({dayPerMonth: e.target.value}),\n          type: 'input',\n          value: props.dayPerMonth,\n        }}/>\n      </div>\n      <div>\n        <label htmlFor={'hourPerDay'}>\n          時間/日\n        </label>\n        <input {...{\n          id: 'hourPerDay',\n          onChange: (e) => props.onChange({hourPerDay: e.target.value}),\n          type: 'input',\n          value: props.hourPerDay,\n        }}/>\n      </div>\n      <div>\n        <label htmlFor={'hourPerDay'}>\n          月単価\n        </label>\n        <input {...{\n          id: 'unitPricePerMonth',\n          onChange: (e) => props.onChange({unitPricePerMonth: e.target.value}),\n          type: 'input',\n          value: props.unitPricePerMonth,\n        }}/>\n      </div>\n    </Fragment>\n  )\n}\n\nconst UnitPricePerDay = (props) => {\n  return (\n    <div>\n      <div>\n        <label htmlFor={'hourPerDay'}>\n          人数\n        </label>\n        <input {...{\n          id: 'numberOfPeople',\n          onChange: (e) => props.onChange({numberOfPeople: e.target.value}),\n          type: 'input',\n          value: props.numberOfPeople,\n        }}/>\n      </div>\n      <div>\n        <label htmlFor={'hourPerDay'}>\n          時給\n        </label>\n        <input {...{\n          id: 'unitPricePerDay',\n          onChange: (e) => props.onChange({unitPricePerDay: e.target.value}),\n          type: 'input',\n          value: props.unitPricePerDay,\n        }}/>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}